<?php
/**
 * Copyright (c) 2010, Philip Graham
 * All rights reserved.
 */
namespace zpt\cdt\compile;

use \zeptech\anno\Annotations;
use \zpt\util\File;
use \DirectoryIterator;
use \ReflectionClass;

/**
 * This class compiles service definition classes.  There are two ways of
 * defining a service.  Either by directly implementing a the
 * {@link zeptech\rest\RequestHandler} interface, or by annotating a class with
 * @Service and annotating the class' methods with @Method {DELETE|GET|POST|PUT} * and @Uri <uri>.
 *
 * In the latter case, a {@link zeptech\Rest\RequestHandler} interface will be
 * generated which dispatches requests for the specified URIs to the appropriate
 * method.
 *
 * In both cases, a mapping for the service will added to the
 * {@link zeptech\rest\RestServer} instance handling the request by the
 * {@link zeptech\rest\ServerConfigurator} generated by the compilation process.
 *
 * @author Philip Graham <philip@zeptech.ca>
 */
class ServiceCompiler {

  /*
   * The server compiler that generates a ServerConfigurator for adding mappings
   * to a RestServer instance.
   */
  private $_serverCompiler;

  /* Service request dispatcher generator. */
  private $_serviceRequestDispatcher;

  /**
   * Compile the services in the given directory.
   *
   * @param string $srvcs Path to the directory that contains the services to
   *   compile
   * @param string $ns The namespace of the services in the given directory.
   */
  public function compile($srvcs, $ns) {
    if (!file_exists($srvcs)) {
      // Nothing to do here
      return;
    }

    $dir = new DirectoryIterator($srvcs);
    foreach ($dir as $srvc) {
      $fname = $srvc->getBasename();

      // Don't process dot files or hidden files or directories
      if ($srvc->isDot() || substr($fname, 0, 1) === '.') {
        continue;
      }

      // Recurse into subdirectories
      if ($srvc->isDir()) {
        $this->compile($srvc->getPathname(), "$ns\\$fname");
        continue;
      }

      // Order is important.  This is not a directory so make sure it is a PHP
      // file before continuing
      if (!File::checkExtension($fname, 'php')) {
        continue;
      }

      $srvcName = $srvc->getBasename('.php');
      $srvcClass = "$ns\\$srvcName";

      $this->compileService($srvcClass);
    }
  }

  public function compileService($srvcClass) {
    $srvcDef = new ReflectionClass($srvcClass);
    $annos = new Annotations($srvcDef);

    // There are two methods of defining a service.
    if ($srvcDef->implementsInterface('zeptech\rest\RequestHandler')) {
      if (isset($annos['uri'])) {
        // Direct RequestHandler implementation
        // TODO Ensure that the class definition implements RequestHandler

        $uris = $annos['uri'];
        if (!is_array($uris)) {
          $uris = array($uris);
        }

        $this->_serverCompiler->addMapping("$srvcClass", array(), $uris);
      }
    } else if (isset($annos['service'])) {
      // Service definition, generate a RequestHandler implementation for this
      // class that handles delegation to the appropriate method of the
      // service.

      // Generate a service handler for this class
      $this->_serviceRequestDispatcher->generate($srvcClass);

      $uris = array();
      foreach ($srvcDef->getMethods() as $method) {
        $methodAnnos = new Annotations($method);

        if (isset($methodAnnos['uri']) && isset($methodAnnos['method'])) {
          $uris[] = array(
            'id' => $method->getName(),
            'template' => $methodAnnos['uri'],
            'method' => $methodAnnos['method']
          );
        }
      }
      $this->_serverCompiler->addActor(
        '\zpt\cdt\rest\ServiceRequestDispatcher', $srvcClass, $uris);

    } /* Else: ignore this class, it is not a service definition. */
  }

  /**
   * Setter for the Server compiler which generates a ServerConfigurator for
   * adding mappings to a {@link \zeptech\rest\RestServer} instance.
   *
   * @param ServerCompiler $serverCompiler The compiler instance.
   */
  public function setServerCompiler($serverCompiler) {
    $this->_serverCompiler = $serverCompiler;
  }

  /**
   * Setter for the service request dispatcher used to generate
   * {@link \zeptech\rest\RequestHandler} implementation that dispatch requests
   * to service classes.
   *
   * @param \zpt\cdt\rest\ServiceRequestDispatcher $serviceRequestDispatcher The
   *   generator instance.
   */
  public function setServiceRequestDispatcher($serviceRequestDispatcher) {
    $this->_serviceRequestDispatcher = $serviceRequestDispatcher;
  }
}
