#!/usr/bin/env php
<?php
/*
 * Copyright (c) 2014, Philip Graham
 * All rights reserved.
 *
 *
 * This file is part of Conductor. For the full copyright and license information
 * please view the LICENSE file that was distributed with this source code.
 */

/**
 * This script performs a development - production deployment.
 *
 * File System deployment:
 * -----------------------
 * The current `staged` tag of the site repo will be exported.
 *
 * @author Philip Graham <philip@zeptech.ca>
 */
use zpt\cdt\bin\BinCommon;
use zpt\cdt\bin\DeployProcess;
use zpt\cdt\compile\SiteCompiler;
use zpt\cdt\config\DatabaseConfiguration;
use zpt\cdt\config\DeploymentConfiguration;
use zpt\db\exception\DatabaseException;
use zpt\db\DatabaseConnection;

require_once __DIR__ . '/setup.php';

$usage = <<<USAGE
cdt-deploy   [--prod-db=DB]   [--ws-link=PATH]   [path]

  path          The path to where the production site will be exported. The
                actual site itself will be exported to a subdirectory of this
                path which is named as the current Unix timestamp.

  --prod-db     The name of the database to use for the production site.
                If not specified no database updates will occur.

  --ws-link     [Optional] Where to create a symlink to the exported site. This
                should be a path that is configured to be served by the web
                server.

All options and parameters can be specified in the site's configuration file.
Any parameters not marked as optional need to either be specified in the site's
configuration file or on the command line.
USAGE;

/*
 * =============================================================================
 * Include necessary FunBox functions.
 * =============================================================================
 */

ensureFn(
  'announceWait',
  'applyDatabaseAlters',
  'atomicSymlink',
  'checkRoot',
  'copyDb',
  'is_createable',
  'passwordPrompt',
  'symlinkInDir'
);

if (!checkRoot()) {
  echo "This script must be run as root.\n";
  exit(1);
}


// Load configuration
$deployConfig = new DeploymentConfiguration($devDir, 'prod');
$dbConfig = new DatabaseConfiguration($devDir, 'prod');

if ($cmdln->argc > 1) {
  $prodDir = $cmdln->argv[1];
} else if (isset($deployConfig['path'])) {
  $prodDir = $deployConfig['path'];
} else {
  binLogError("You must specify or configure a path to deploy to.");
  echo $usage;
  exit(1);
}

if (isset($cmdln->opt['prod-db'])) {
  $prodDb = $cmdln->opt['prod-db'];
} else if (isset($dbConfig['schema'])) {
  $prodDb = $dbConfig['schema'];
} else {
  binLogError("Production database is not configured.");
  echo $usage;
  exit(1);
}

if (isset($cmdln->opt['ws-link'])) {
  $wsLink = $cmdln->opt['ws-link'];
} else if (isset($deployConfig['wsLink'])) {
  $wsLink = $deployConfig['wsLink'];
} else {
  $wsLink = null;
}

// Get and test priviledged database username and password.
$dbUserPrompt = String('Please enter priviledged {0} database username');
$privDbUser = passwordPrompt(
  $dbUserPrompt->format($dbConfig['driver']),
  'root'
);
$dbPassPrompt = String('Please enter priviledged {0} database password');
$privDbPass = passwordPrompt($dbPassPrompt->format($dbConfig['driver']));

try {
  $db = new DatabaseConnection([
    'driver' => $dbConfig['driver'],
    'username' => $privDbUser,
    'password' => $privDbPass
  ]);
} catch (DatabaseException $e) {
  binLogError("Unable to connect to database, {$e->getMessage()}");
  exit(1);
}

try {
  $stageProcess = new DeployProcess($devDir, $prodDir);
  $stageProcess->setDatabaseConnection($db);
  $stageProcess->setProductionDatabase($prodDb);
  $stageProcess->setWebServerLink($wsLink);
  $stageProcess->execute(BinCommon::$logger);

  // Return 0 to indicate success
  return 0;
} catch (InvalidArgumentException $e) {
  binLogError($e->getMessage());
  echo $usage;
  return 1;
} catch (RuntimeException $e) {
  binLogError($e->getMessage());
  return 1;
}
