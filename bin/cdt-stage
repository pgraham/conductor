#!/usr/bin/env php
<?php
/*
 * Copyright (c) 2014, Philip Graham
 * All rights reserved.
 *
 *
 * This file is part of Conductor. For the full copyright and license information
 * please view the LICENSE file that was distributed with this source code.
 */

/**
 * This script performs a development -> staging deployment.
 *
 * File System deployment:
 * -----------------------
 * The general strategy is to export the development site to a site dump that 
 * will contain a certain number of previous staging sites. The newly exported 
 * site will then be symlinked to a specified location that is configured to be
 * served by the web server.
 *
 * @author Philip Graham <philip@zeptech.ca>
 */
use zpt\cdt\bin\BinCommon;
use zpt\cdt\bin\CmdlnLogger;
use zpt\cdt\bin\StagingProcess;
use zpt\cdt\compile\SiteCompiler;
use zpt\cdt\config\DatabaseConfiguration;
use zpt\cdt\config\DeploymentConfiguration;
use zpt\db\exception\DatabaseException;
use zpt\db\DatabaseConnection;

require_once __DIR__ . '/setup.php';

$usage = <<<USAGE
cdt-stage   [--staging-db=DB]   [--production-db=DB]   [--ws-link=PATH]
   [--prod-link=PATH]   [path]

All options and arguments used by this script can be specified in the site's
configuration file. Any parameters and arguments specified on the command line
will override those specified in the configuration file.

  path          The path to where the staging site will be exported. The actual
                site itself will be exported to a subdirectory of this path
                which is named as the current Unix timestamp.

  --staging-db  The name of the database to use for the staging site. This can
                be specified in the site's configuration file. If not specified
                no database updates will occur.

  --prod-db     The name of the production database. This is copied over the
                staging database before applying any necessary alters.

  --ws-link     [Optional] Where to create a symlink to the exported site. This
                should be a path that is configured to be served by the web
                server.

  --prod-link   [Optional] The link from which the current production site is
                being served. This will be used to copy user content into the
                staging site.

Any parameters not marked as optional need to either be specified in the site's
configuration file or on the command line.
USAGE;


// Include necessary FunBox functions.
ensureFn(
  'announceWait',
  'applyDatabaseAlters',
  'atomicSymlink',
  'checkRoot',
  'copyDb',
  'is_createable',
  'passwordPrompt',
  'symlinkInDir'
);

if (!checkRoot()) {
  echo "This script must be run as root.\n";
  exit(1);
}

// Load configuration
$deployConfig = new DeploymentConfiguration($devDir, 'stage');
$deployConfigProd = new DeploymentConfiguration($devDir, 'prod');
$dbConfig = new DatabaseConfiguration($devDir, 'stage');
$dbConfigProd = new DatabaseConfiguration($devDir, 'prod');

if ($cmdln->argc > 1) {
  $stageDir = $cmdln->argv[1];
} else if (isset($deployConfig['path'])) {
  $stageDir = $deployConfig['path'];
} else {
  binLogError("You must specify or configure a path to deploy to.");
  echo $usage;
  exit(1);
}

if (isset($cmdln->opt['staging-db'])) {
  $stageDb = $cmdln->opt['staging-db'];
} else if (isset($dbConfig['schema'])) {
  $stageDb = $dbConfig['schema'];
} else {
  binLogError("Staging database is not configured.");
  echo $usage;
  exit(1);
}

if (isset($cmdln->opt['prod-db'])) {
  $prodDb = $cmdln->opt['prod-db'];
} else if (isset($dbConfigProd['schema'])) {
  $prodDb = $dbConfigProd['schema'];
} else {
  binLogError("Production database is not configured.");
  echo $usage;
  exit(1);
}

if (isset($cmdln->opt['ws-link'])) {
  $stageLink = $cmdln->opt['ws-link'];
} else if (isset($deployConfig['wsLink'])) {
  $stageLink = $deployConfig['wsLink'];
} else {
  $stageLink = null;
}

if (isset($cmdln->opt['prod-link'])) {
  $prodLink = $cmdln->opt['prod-link'];
} else if (isset($deployConfigProd['wsLink'])) {
  $prodLink = $deployConfigProd['wsLink'];
} else {
  $prodLink = null;
}

// Save a timestamp for identifying and associating output files
$ts = time();
$stageDir = "$stageDir/$ts";

// Get and test priviledged database username and password.
$dbUserPrompt = String('Please enter priviledged {0} database username');
$privDbUser = passwordPrompt(
  $dbUserPrompt->format($dbConfig['driver']),
  'root'
);
$dbPassPrompt = String('Please enter priviledged {0} database password');
$privDbPass = passwordPrompt($dbPassPrompt->format($dbConfig['driver']));

try {
  $db = new DatabaseConnection([
    'driver' => $dbConfig['driver'],
    'username' => $privDbUser,
    'password' => $privDbPass
  ]);
} catch (DatabaseException $e) {
  binLogError("Unable to connect to database, {$e->getMessage()}");
  exit(1);
}

try {
  $stageProcess = new StagingProcess($devDir, $stageDir);
  $stageProcess->setDatabaseConnection($db);
  $stageProcess->setStagingDatabase($stageDb);
  $stageProcess->setProductionDatabase($prodDb);
  $stageProcess->setWebServerLink($stageLink);
  $stageProcess->setCurrentProductionLink($prodLink);
  $stageProcess->execute(BinCommon::$logger);

  // Return 0 to indicate success
  return 0;
} catch (InvalidArgumentException $e) {
  binLogError($e->getMessage());
  echo $usage;
  return 1;
} catch (RuntimeException $e) {
  binLogError($e->getMessage());
  return 1;
}
